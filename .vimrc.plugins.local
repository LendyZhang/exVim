" This file will be loaded after .vimrc.plugins,
" but before 'filetype plugin on', 'filetype indent on' and 'syntax on' been executed.
" This file is designed to be safe to add your own plugins and plugins' configuration.

" Add your customized plugins:
" Example: Plugin 'foo/bar/foobar'

" The famous Atom One Dark theme..
Plugin 'rakr/vim-one'

" Enhance C/C++ syntax highlighting.
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1
Plugin 'LendyZhang/vim-cpp-enhanced-highlight'

" Detect indent style.
Plugin 'luochen1990/indent-detector.vim'

" The best semantic completion I'd ever used.
Plugin 'neoclide/coc.nvim', {'pinned': 1}

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<CR>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<CR>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<CR>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<CR>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<CR>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
" Find files.
nnoremap <silent> <space>f  :<C-u>CocList files<CR>
" Grep.
nnoremap <silent> <space>g  :<C-u>CocList grep<CR>

" Semantic highlighting.
Plugin 'jackguo380/vim-lsp-cxx-highlight'

augroup auto_switch_semantic_highlight
  autocmd!
  autocmd TextChanged,TextChangedI *
          \ if !exists('b:semantic_highlight_disabled') |
          \   let b:semantic_highlight_disabled=1 |
          \   call lsp_cxx_hl#hl#disable() |
          \ endif
  autocmd BufWritePost,FileWritePost,FileAppendPost *
          \ if exists('b:semantic_highlight_disabled') |
          \   unlet! b:semantic_highlight_disabled |
          \   call lsp_cxx_hl#hl#enable() |
          \ endif
augroup END

" Polish several plugins with nerd font glyphs.
" Plugin 'ryanoasis/vim-devicons'
